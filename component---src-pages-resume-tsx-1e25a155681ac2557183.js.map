{"version":3,"sources":["webpack:///./src/components/ui/Timeline/styles.js","webpack:///./src/components/ui/Timeline/index.js","webpack:///./src/components/Experience/index.js","webpack:///./src/components/Education/index.js","webpack:///./src/components/ui/ProgressBar/styles.js","webpack:///./src/components/ui/ProgressBar/index.js","webpack:///./src/components/Skills/styles.js","webpack:///./src/components/Skills/index.js","webpack:///./src/pages/resume.tsx","webpack:///./src/components/utils/FormatHtml/index.js"],"names":["Timeline","styled","div","Details","Content","Title","Subtitle","Date","Point","span","title","subtitle","content","startDate","endDate","Experience","useStaticQuery","markdownRemark","allMarkdownRemark","sectionTitle","frontmatter","experiences","edges","Container","section","TitleSection","map","item","node","id","html","company","position","key","FormatHtml","Education","education","university","degree","ProgressBar","BarWrapper","Bar","percentage","h3","Percentage","Skills","Skill","skills","center","ResumePage","Layout","SEO","className","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-pages-resume-tsx-1e25a155681ac2557183.js","sourcesContent":["import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\nexport const Timeline = styled.div`\n  ${tw`flex flex-col sm:flex-row w-full p-4 relative border-l border-indigo-200`};\n\n  &:last-child {\n    ${tw`pb-0`};\n  }\n`;\n\nexport const Details = styled.div`\n  ${tw`w-full sm:w-1/3`};\n`;\n\nexport const Content = styled.div`\n  ${tw`w-full sm:w-2/3 mt-4 sm:mt-0`};\n`;\n\nexport const Title = styled.div`\n  ${tw`font-semibold mt-3`};\n`;\n\nexport const Subtitle = styled.div`\n  ${tw`text-xs`};\n`;\n\nexport const Date = styled.div`\n  ${tw`text-xs border border-pink-500 rounded-full px-2`};\n  width: fit-content;\n`;\n\nexport const Point = styled.span`\n  ${tw`w-3 h-3 border border-indigo-200 bg-indigo-100 rounded-full absolute`};\n  left: -6px;\n  top: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Styled from './styles';\n\nconst Timeline = ({ title, subtitle, content, startDate, endDate }) => (\n  <Styled.Timeline>\n    <Styled.Point />\n    <Styled.Details>\n      <Styled.Date>\n        {startDate} - {endDate}\n      </Styled.Date>\n      <Styled.Title>{title}</Styled.Title>\n      <Styled.Subtitle>{subtitle}</Styled.Subtitle>\n    </Styled.Details>\n    <Styled.Content>{content}</Styled.Content>\n  </Styled.Timeline>\n);\n\nTimeline.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  content: PropTypes.any.isRequired,\n  startDate: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired\n};\n\nexport default Timeline;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/ui/Timeline';\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nconst Experience = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"experiences section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"experiences\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              company\n              position\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle = markdownRemark.frontmatter;\n  const experiences = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} />\n\n      {experiences.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { company, position, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={company}\n            subtitle={position}\n            content={<FormatHtml content={html} />}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/ui/Timeline';\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nconst Education = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"education section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"education\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              university\n              degree\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle = markdownRemark.frontmatter;\n  const education = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} />\n\n      {education.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { university, degree, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={university}\n            subtitle={degree}\n            content={<FormatHtml content={html} />}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Education;\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\nexport const ProgressBar = styled.div`\n  ${tw`p-3`};\n`;\n\nexport const BarWrapper = styled.div`\n  ${tw`w-full h-2 bg-gray-300 rounded overflow-hidden mt-1`};\n`;\n\nexport const Bar = styled.div`\n  ${tw`h-2 bg-pink-400`};\n  width: ${({ percentage }) => `${percentage}%`};\n`;\n\nexport const Content = styled.div`\n  ${tw`w-full flex justify-between`};\n`;\n\nexport const Title = styled.h3`\n  ${tw`font-semibold`};\n`;\n\nexport const Percentage = styled.h3`\n  ${tw`font-semibold`};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as Styled from './styles';\n\nconst ProgressBar = ({ title, percentage }) => (\n  <Styled.ProgressBar>\n    <Styled.Content>\n      <Styled.Title>{title}</Styled.Title>\n      <Styled.Percentage>{percentage}%</Styled.Percentage>\n    </Styled.Content>\n    <Styled.BarWrapper>\n      <Styled.Bar percentage={percentage} />\n    </Styled.BarWrapper>\n  </Styled.ProgressBar>\n);\n\nProgressBar.propTypes = {\n  title: PropTypes.string.isRequired,\n  percentage: PropTypes.number.isRequired\n};\n\nexport default ProgressBar;\n","import styled from 'styled-components';\nimport tw from 'tailwind.macro';\n\nexport const Skills = styled.div`\n  ${tw`flex flex-wrap w-full`};\n`;\n\nexport const Skill = styled.div`\n  ${tw`w-full sm:w-1/2`};\n`;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Container from 'components/ui/Container';\nimport TitleSection from 'components/ui/TitleSection';\nimport ProgressBar from 'components/ui/ProgressBar';\n\nimport * as Styled from './styles';\n\nconst Skills = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"skills section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(filter: { frontmatter: { category: { eq: \"skills\" } } }, sort: { fields: fileAbsolutePath }) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              percentage\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle = markdownRemark.frontmatter;\n  const skills = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} subtitle={sectionTitle.subtitle} center />\n      <Styled.Skills>\n        {skills.map((item) => {\n          const {\n            id,\n            frontmatter: { title, percentage }\n          } = item.node;\n\n          return (\n            <Styled.Skill key={id}>\n              <ProgressBar title={title} percentage={percentage} />\n            </Styled.Skill>\n          );\n        })}\n      </Styled.Skills>\n    </Container>\n  );\n};\n\nexport default Skills;\n","import React from 'react';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport Experience from 'components/Experience';\nimport Education from 'components/Education';\nimport Skills from 'components/Skills';\nimport Portfolio from 'components/Portfolio';\n\nconst ResumePage: React.FC = () => (\n  <Layout>\n    <SEO title=\"Resume\" />\n    <Experience />\n    <hr />\n    <Education />\n    <hr />\n    <Skills />\n    {/* <hr />\n    <Portfolio /> */}\n  </Layout>\n);\n\nexport default ResumePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FormatHtml = ({ content }) => (\n  <span\n    className=\"format-html\"\n    dangerouslySetInnerHTML={{\n      __html: content\n    }}\n  />\n);\n\nFormatHtml.propTypes = {\n  content: PropTypes.any.isRequired\n};\n\nexport default FormatHtml;\n"],"sourceRoot":""}